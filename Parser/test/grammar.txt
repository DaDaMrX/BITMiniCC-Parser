compilation-unit ::= translation-unit
translation-unit ::= external-declaration | translation-unit external-declaration
external-declaration ::= function-definition | declaration
function-definition ::= declaration-specifiers declarator compound-statement

declaration-specifiers ::= type-specifier | type-qualifier type-specifier
declarator ::= direct-declarator
direct-declarator ::= identifier | direct-declarator ( ) | direct-declarator ( parameter-type-list )
type-specifier ::= void | char | short | int | long | float | double | signed | unsigned
type-qualifier ::= const | restrict | volatile | _Atomic
parameter-type-list ::= parameter-list | parameter-list , ...
parameter-list ::= parameter-declaration | parameter-list , parameter-declaration
parameter-declaration ::= declaration-specifiers declarator | declaration-specifiers abstract-declarator

compound-statement ::= { block-item-list } | { }
block-item-list ::= block-item | block-item-list block-item
block-item ::= declaration | statement
declaration ::= declaration-specifiers ; | declaration-specifiers init-declarator-list ;

init-declarator-list ::= init-declarator
    | init-declarator-list , init-declarator
init-declarator ::= declarator
    | declarator = initializer
initializer ::= assignment-expression


statement ::= labeled-statement
    | compound-statement
    | expression-statement
    | selection-statement
    | iteration-statement
    | jump-statement
    | ;

labeled-statement ::= identifier : statement
    | case constant-expression : statement
    | default : statement

constant-expression ::= conditional-expression

expression-statement ::= expression ;

selection-statement ::= if ( expression ) statement
    | if ( expression ) statement else statement
    | switch ( expression ) statement

iteration-statement ::= while ( expression ) statement
    | do statement while ( expression );
    | for ( expression ; expression ; expression ) statement
    | for ( int expression ; expression ; expression ) statement
    | for ( ; expression ; expression ) statement
    | for ( expression ; expression ; ) statement
    | for ( ; expression ; ) statement
    | for ( ; ; ) statement

jump-statement ::= goto identifier ; | continue ; | break ; | return expression ; | return ;


expression ::= assignment-expression | expression , assignment-expression
assignment-expression ::= conditional-expression
    | unary-expression assignment-operator assignment-expression | unary-expression
assignment-operator ::= = | *= | /= | %= | += | -= | <<= | >>= | &= | ^=
conditional-expression ::= logical-OR-expression
    | logical-OR-expression ? expression : conditional-expression

AND-expression ::= equality-expression
    | AND-expression & equality-expression
exclusive-OR-expression ::= AND-expression
    | exclusive-OR-expression ^ AND-expression
inclusive-OR-expression ::= exclusive-OR-expression
    | inclusive-OR-expression <VerticalBar> exclusive-OR-expression
logical-AND-expression ::= inclusive-OR-expression
    | logical-AND-expression && inclusive-OR-expression
logical-OR-expression ::= logical-AND-expression
    | logical-OR-expression <DoubleVerticalBar> logical-AND-expression

unary-expression ::= postfix-expression
    | ++ unary-expression
    | -- unary-expression
    | unary-operator cast-expression
    | sizeof unary-expression
    | sizeof ( type-name )
    | _Alignof ( type-name )
unary-operator ::= & | * | + | - | ~ | !
postfix-expression ::= primary-expression
    | postfix-expression [ expression ]
    | postfix-expression ( argument-expression-list )
    | postfix-expression ( )
    | postfix-expression . identifier
    | postfix-expression -> identifier
    | postfix-expression ++
    | postfix-expression -
    | ( type-name ) { initializer-list }
    | ( type-name ) { initializer-list , }
primary-expression ::= identifier | constant | string | ( expression )

argument-expression-list ::= assignment-expression
    | argument-expression-list , assignment-expression

cast-expression ::= unary-expression | ( type-specifier ) cast-expression

multiplicative-expression ::= cast-expression
    | multiplicative-expression * cast-expression
    | multiplicative-expression / cast-expression
    | multiplicative-expression % cast-expression
additive-expression ::= multiplicative-expression
    | additive-expression + multiplicative-expression
    | additive-expression - multiplicative-expression
shift-expression ::= additive-expression
    | shift-expression << additive-expression
    | shift-expression >> additive-expression
relational-expression ::= shift-expression
    | relational-expression < shift-expression
    | relational-expression > shift-expression
    | relational-expression <= shift-expression
    | relational-expression >= shift-expression
equality-expression ::= relational-expression
    | equality-expression == relational-expression
    | equality-expression != relational-expression

