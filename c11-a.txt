translation-unit ::= external-declaration | translation-unit external-declaration
external-declaration ::= function-definition | declaration
function-definition ::= declaration-specifiers declarator compound-statement

declaration ::= declaration-specifiers init-declarator-list ;
    | declaration-specifiers ;
    | static_assert-declaration

declaration-specifiers ::= storage-class-specifier declaration-specifiers
    | storage-class-specifier
    | type-specifier declaration-specifiers
    | type-specifier
    | type-qualifier declaration-specifiers
    | type-qualifier
    | function-specifier declaration-specifiers
    | function-specifier
    | alignment-specifier declaration-specifiers
    | alignment-specifier

statement ::= labeled-statement
    | compound-statement
    | expression-statement
    | selection-statement
    | iteration-statement
    | jump-statement

labeled-statement ::= identifier : statement
    | case constant-expression : statement
    | default : statement

compound-statement ::= { block-item-list } | { }
block-item-list ::= block-item | block-item-list block-item
block-item ::= declaration | statement

expression-statement ::= expression ;
selection-statement ::= if ( expression ) statement
    | if ( expression ) statement else statement
    | switch ( expression ) statement

iteration-statement ::= while ( expression ) statement
    | do statement while ( expression );
    | for ( expression ; expression ; expression ) statement
    | for ( ; expression ; expression ) statement
    | for ( expression ; expression ; ) statement
    | for ( ; expression ; ) statement
    | for ( ; ; ) statement

jump-statement ::= goto identifier ; | continue ; | break ; | return expression ; | return ;


primary-expression ::= identifier | constant | string-literal | ( expression )
postfix-expression ::= primary-expression
    | postfix-expression [ expression ]
    | postfix-expression ( argument-expression-list )
    | postfix-expression ( )
    | postfix-expression . identifier
    | postfix-expression -> identifier
    | postfix-expression ++
    | postfix-expression -
    | ( type-name ) {initializer-list }
    | ( type-name ) {initializer-list , }
argument-expression-list ::= assignment-expression
    | argument-expression-list , assignment-expression

unary-expression ::= postfix-expression
    | ++ unary-expression
    | -- unary-expression
    | unary-operator cast-expression
    | sizeof unary-expression
    | sizeof ( type-name )
    | _Alignof ( type-name )
unary-operator ::= & | * | + | - | ~ | !
cast-expression ::= unary-expression ( type-name ) cast-expression

multiplicative-expression ::= cast-expression
    | multiplicative-expression * cast-expression
    | multiplicative-expression / cast-expression
    | multiplicative-expression % cast-expression
additive-expression ::= multiplicative-expression
    | additive-expression + multiplicative-expression
    | additive-expression - multiplicative-expression
shift-expression ::= additive-expression
    | shift-expression << additive-expression
    | shift-expression >> additive-expression
relational-expression ::= shift-expression
    | relational-expression < shift-expression
    | relational-expression > shift-expression
    | relational-expression <= shift-expression
    | relational-expression >= shift-expression
equality-expression ::= relational-expression
    | equality-expression == relational-expression
    | equality-expression != relational-expression
AND-expression ::= equality-expression
    | AND-expression & equality-expression
exclusive-OR-expression ::= AND-expression
    | exclusive-OR-expression ^ AND-expression
inclusive-OR-expression ::= exclusive-OR-expression
    | inclusive-OR-expression | exclusive-OR-expression
logical-AND-expression ::= inclusive-OR-expression
    | logical-AND-expression && inclusive-OR-expression
logical-OR-expression ::= logical-AND-expression
    | logical-OR-expression || logical-AND-expression
conditional-expression ::= logical-OR-expression
    | logical-OR-expression ? expression : conditional-expression
assignment-expression ::= conditional-expression
    | unary-expression assignment-operator assignment-expression
assignment-operator ::= = | *= | /= | %= | += | -= | <<= | >>= | &= | ^= | |=

expression ::= assignment-expression | expression , assignment-expression

constant-expression ::= conditional-expression



init-declarator-list ::= init-declarator
    | init-declarator-list , init-declarator
init-declarator ::= declarator
    | declarator = initializer
storage-class-specifier ::= typedef | extern | static | _Thread_local | auto | register
type-specifier ::= void | char | short | int | long | float | double
    signed | unsigned | _Bool | _Complex | atomic-type-specifier
    | struct-or-union-specifier | enum-specifier | typedef-name
struct-or-union-specifier ::= struct-or-union identifier { struct-declaration-list }
    | struct-or-union { struct-declaration-list }
    | struct-or-union identifier
struct-or-union ::= struct | union
struct-declaration-list ::= struct-declaration | struct-declaration-list struct-declaration
struct-declaration ::= specifier-qualifier-list struct-declarator-list ;
    | specifier-qualifier-list ;
    | static_assert-declaration
specifier-qualifier-list ::= type-specifier specifier-qualifier-list
    | type-specifier
    | type-qualifier specifier-qualifier-list
    | type-qualifier
struct-declarator-list ::= struct-declarator | struct-declarator-list , struct-declarator
struct-declarator ::= declarator
    | declarator : constant-expression
    | : constant-expression


enum-specifier ::= enum identifier { enumerator-list }
    | enum { enumerator-list }
    | enum identifier { enumerator-list ,}
    | enum { enumerator-list ,}
    | enum identifier
enumerator-list ::= enumerator | enumerator-list , enumerator
enumerator ::= enumeration-constant | enumeration-constant = constant-expression

atomic-type-specifier ::= _Atomic ( type-name )
type-qualifier ::= const | restrict | volatile | _Atomic
function-specifier ::= inline | _Noreturn
alignment-specifier ::= _Alignas ( type-name ) | _Alignas ( constant-expression )

declarator ::= pointer direct-declarator | direct-declarator
direct-declarator ::= identifier
    | ( declarator )
    | direct-declarator [ type-qualifier-list assignment-expression ]
    | direct-declarator [ static type-qualifier-list assignment-expression ]
    | direct-declarator [ type-qualifier-list static assignment-expression ]
    | direct-declarator [ type-qualifier-list *]
    | direct-declarator ( parameter-type-list )
    | direct-declarator ( identifier-list )
pointer ::= * type-qualifier-list | * type-qualifier-list pointer
type-qualifier-list: type-qualifier type-qualifier-list type-qualifier
parameter-type-list ::= parameter-list | parameter-list , ...
parameter-list ::= parameter-declaration | parameter-list , parameter-declaration
parameter-declaration ::= declaration-specifiers declarator | declaration-specifiers abstract-declarator
identifier-list ::= identifier identifier-list , identifier

type-name ::= specifier-qualifier-list abstract-declarator | specifier-qualifier-list
abstract-declarator ::= pointer
    | pointer direct-abstract-declarator
    | direct-abstract-declarator
direct-abstract-declarator ::= ( abstract-declarator )
    | direct-abstract-declarator [ type-qualifier-list assignment-expression ]
    | direct-abstract-declarator [ static type-qualifier-list assignment-expression ]
    | direct-abstract-declarator [ type-qualifier-list static assignment-expression ]
    | [ type-qualifier-list static assignment-expression ]
    | direct-abstract-declarator [*]
    |  [*]
    | direct-abstract-declarator ( parameter-type-list )
    | direct-abstract-declarator (  )
    |  ( parameter-type-list )
    | (  )

typedef-name ::= identifier

initializer ::= assignment-expression | { initializer-list } | { initializer-list , }
initializer-list ::= designation initializer
    | initializer
    | initializer-list , designation initializer
    | initializer-list , initializer
designation ::= designator-list =
designator-list ::= designator | designator-list designator
designator ::= [ constant-expression ] . identifier

static_assert-declaration ::= _Static_assert ( constant-expression , string-literal );
